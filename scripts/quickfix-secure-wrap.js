#!/usr/bin/env node
/**
 * Nodus QuickFix Secure Wrapper Script
 * Pass 1: Auto-wrap mutation methods with ForensicLogger stubs.
 * Pass 2: Insert missing JSDoc placeholders.
 * Run with: node scripts/quickfix-secure-wrap.js
 */
import fs from "fs";
import path from "path";

const rootDir = path.resolve("./src");
const forensicImport =
	"import { ForensicLogger } from '@core/security/ForensicLogger.js';";
const forensicLine =
	"await ForensicLogger.createEnvelope({ actorId: 'system', action: '<auto>', target: '<unknown>', label: 'unclassified' });";

function collectFiles(dir) {
	let files = [];
	for (const file of fs.readdirSync(dir)) {
		const full = path.join(dir, file);
		const stat = fs.statSync(full);
		if (stat.isDirectory()) {
			if (!["node_modules", "dist", "test", "__tests__"].includes(file)) {
				files = files.concat(collectFiles(full));
			}
		} else if (file.endsWith(".js")) {
			files.push(full);
		}
	}
	return files;
}

function hasForensicImport(content) {
	return content.includes("@core/security/ForensicLogger.js");
}

function ensureForensicImport(content) {
	if (hasForensicImport(content)) return content;
	const lines = content.split("\n");
	const importIndex = lines.findIndex((l) => l.startsWith("import "));
	const insertAt = importIndex >= 0 ? importIndex + 1 : 0;
	lines.splice(insertAt, 0, forensicImport);
	return lines.join("\n");
}

function wrapMutations(content) {
	return content.replace(
		/(async\s+)?(save|update|delete|create)[A-Za-z0-9_]*\s*\([^)]*\)\s*{\s*/g,
		(match) => `${match}  ${forensicLine}\n  `
	);
}

function addJSDocPlaceholders(content) {
	// Add simple placeholders for exported functions
	content = content.replace(
		/(^|\n)(\s*)(export\s+)?(async\s+)?function\s+([A-Za-z0-9_]+)/g,
		(match, newline, indent, exportKw, asyncKw, name) => {
			if (content.includes(`@function ${name}`)) return match;
			return (
				`${newline}${indent}/**\n` +
				`${indent} * TODO: Add JSDoc for function ${name}\n` +
				`${indent} * @memberof AutoGenerated\n` +
				`${indent} */\n${indent}` +
				match.trim()
			);
		}
	);

	// Add placeholders for simple method definitions (best-effort)
	content = content.replace(
		/(\n\s*)(async\s+)?([A-Za-z0-9_]+)\s*\([^)]*\)\s*{/g,
		(match, indent, asyncKw, name) => {
			if (name.startsWith("_") || content.includes(`@method ${name}`))
				return match;
			return (
				`${indent}/**\n` +
				`${indent} * TODO: Add JSDoc for method ${name}\n` +
				`${indent} * @memberof AutoGenerated\n` +
				`${indent} */\n${indent}` +
				match.trim()
			);
		}
	);

	return content;
}

function processFile(filePath) {
	let content = fs.readFileSync(filePath, "utf8");
	const original = content;
	let changed = false;

	if (
		/(save|update|delete|create)[A-Za-z0-9_]*\s*\([^)]*\)\s*{/.test(content)
	) {
		content = ensureForensicImport(content);
		content = wrapMutations(content);
		changed = true;
	}

	if (!content.includes("@memberof AutoGenerated")) {
		content = addJSDocPlaceholders(content);
		changed = true;
	}

	if (changed && content !== original) {
		fs.writeFileSync(filePath, content, "utf8");
		console.log(`âœ… Updated: ${filePath}`);
	}
}

console.log("ðŸš€ Running Nodus QuickFix Secure Wrapper...");
const allFiles = collectFiles(rootDir);
allFiles.forEach(processFile);
console.log(`âœ¨ Completed: ${allFiles.length} files scanned.`);
