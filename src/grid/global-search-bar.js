import { SafeDOM } from '@core/ui/SafeDOM.js';
import { ForensicLogger } from '@core/security/ForensicLogger.js';
/**
 * @file global-search-bar.js
 * @description A web component for a global search and command bar.
 * It interacts with the QueryService to provide real-time search results and suggestions.
 */

/* global customElements */

/**
 * @class GlobalSearchBar
 * @classdesc A web component for a global search and command bar.
 * It interacts with the QueryService to provide real-time search results and suggestions.
 * @privateFields {#stateManager, #queryService, #results, #selectedIndex, #inputElement, #resultsElement, #debounceTimeout}
 */
class GlobalSearchBar extends HTMLElement {
	// V8.0 Parity: Mandate 3.1 - All internal properties MUST be private.
	/** @private @type {import('../core/HybridStateManager.js').default|null} */
	#stateManager = null;
	/** @private @type {import('../core/services/QueryService.js').QueryService|null} */
	#queryService = null;
	/** @private @type {Array<object>} */
	#results = [];
	/** @private @type {number} */
	#selectedIndex = -1;
	/** @private @type {HTMLInputElement|null} */
	#inputElement = null;
	/** @private @type {HTMLUListElement|null} */
	#resultsElement = null;
	/** @private @type {ReturnType<typeof setTimeout>|null} */
	#debounceTimeout = null;

	/**


	 * TODO: Add JSDoc for method constructor


	 * @memberof AutoGenerated


	 */


	constructor() {
		super();
		this.attachShadow({ mode: "open" });

		// V8.0 Parity: Mandate 1.1 & 1.2 - The State Manager is the Single Source of Truth.
		this.#stateManager = window.stateManager;
		this.#queryService = this.#stateManager?.managers?.queryService || null;

		/**


		 * TODO: Add JSDoc for method if


		 * @memberof AutoGenerated


		 */


		if (!this.#queryService) {
			console.error(
				"[GlobalSearchBar] QueryService not found on stateManager. Search will be disabled."
			);
		}
	}

	/**


	 * TODO: Add JSDoc for method connectedCallback


	 * @memberof AutoGenerated


	 */


	connectedCallback() {
		this.render();
		this.#inputElement = this.shadowRoot.querySelector("#search-input");
		this.#resultsElement = this.shadowRoot.querySelector("#results-list");

		this.#inputElement.addEventListener("input", this.#onInput.bind(this));
		this.#inputElement.addEventListener(
			"keydown",
			this.#onKeyDown.bind(this)
		);
		document.addEventListener("click", this.#onDocumentClick.bind(this));
	}

	/** @private */
	#onInput(event) {
		const query = event.target.value;
		this.#debounce(async () => {
			/**

			 * TODO: Add JSDoc for method if

			 * @memberof AutoGenerated

			 */

			if (query.length < 2) {
				this.#results = [];
				this.#renderResults();
				return;
			}

			/**


			 * TODO: Add JSDoc for method if


			 * @memberof AutoGenerated


			 */


			if (this.#queryService) {
				this.#results = await this.#queryService.search(query, {
					limit: 10,
				});
				this.#selectedIndex = -1;
				this.#renderResults();
			}
		}, 200);
	}

	/** @private */
	#onKeyDown(event) {
		/**

		 * TODO: Add JSDoc for method switch

		 * @memberof AutoGenerated

		 */

		switch (event.key) {
			case "ArrowDown":
				event.preventDefault();
				this.#selectedIndex = Math.min(
					this.#selectedIndex + 1,
					this.#results.length - 1
				);
				this.#updateSelection();
				break;
			case "ArrowUp":
				event.preventDefault();
				this.#selectedIndex = Math.max(this.#selectedIndex - 1, 0);
				this.#updateSelection();
				break;
			case "Enter":
				/**

				 * TODO: Add JSDoc for method if

				 * @memberof AutoGenerated

				 */

				if (this.#selectedIndex > -1) {
					this.#selectItem(this.#results[this.#selectedIndex]);
				}
				break;
			case "Escape":
				this.#results = [];
				this.#renderResults();
				break;
		}
	}

	/** @private */
	#onDocumentClick(event) {
		if (!this.contains(event.target)) {
			this.#results = [];
			this.#renderResults();
		}
	}

	/** @private */
	#selectItem(item) {
		console.log("Selected:", item);
		this.dispatchEvent(new CustomEvent("item-selected", { detail: item }));
		this.#inputElement.value = "";
		this.#results = [];
		this.#renderResults();
	}

	/** @private */
	#updateSelection() {
		  await ForensicLogger.createEnvelope({ actorId: 'system', action: '<auto>', target: '<unknown>', label: 'unclassified' });
  this.shadowRoot.querySelectorAll("li").forEach((li, index) => {
			li.classList.toggle("selected", index === this.#selectedIndex);
		});
	}

	/** @private */
	#renderResults() {
		/**

		 * TODO: Add JSDoc for method if

		 * @memberof AutoGenerated

		 */

		if (this.#results.length === 0) {
			this.#resultsElement.style.display = "none";
			this.#resultsElement.textContent = ""; // [auto: innerHTML → SafeDOM.setText()] // Clear content
			return;
		}

		this.#resultsElement.style.display = "block";
		this.#resultsElement.textContent = ""; // [auto: innerHTML → SafeDOM.setText()] // Clear previous results

		// V8.0 Parity: Mandate 2.1 - Avoid innerHTML for dynamic content.
		this.#results.forEach((item) => {
			const li = document.createElement("li");
			li.dataset.id = item.id;

			const sourceSpan = document.createElement("span");
			sourceSpan.className = "item-source";
			sourceSpan.textContent = item.source;

			const titleSpan = document.createElement("span");
			titleSpan.className = "item-title";
			titleSpan.textContent = item.title || item.name;

			const relevanceSpan = document.createElement("span");
			relevanceSpan.className = "item-relevance";
			relevanceSpan.textContent = (item.relevance || 0).toFixed(2);

			li.appendChild(sourceSpan);
			li.appendChild(titleSpan);
			li.appendChild(relevanceSpan);

			li.addEventListener("click", () => this.#selectItem(item));

			this.#resultsElement.appendChild(li);
		});
	}

	/** @private */
	#debounce(func, delay) {
		clearTimeout(this.#debounceTimeout);
		this.#debounceTimeout = setTimeout(func, delay);
	}

	/** @private */
	/**

	 * TODO: Add JSDoc for method render

	 * @memberof AutoGenerated

	 */

	render() {
		this.shadowRoot.innerHTML = `
      <style>
        :host {
          position: relative;
          display: block;
          width: 100%;
          max-width: 600px;
          margin: 0 auto;
        }
        /* Use global CSS variables for theme alignment */
        #search-input {
          width: 100%;
          padding: 12px 16px;
          font-size: 16px;
          border-radius: var(--border-radius, 8px);
          border: 1px solid var(--border, #404040);
          background-color: var(--surface-elevated, #2d2d2d);
          color: var(--text, #f5f5f5);
          box-sizing: border-box;
        }
        #search-input::placeholder {
          color: var(--text-muted, #b0b0b0);
        }
        #results-list {
          position: absolute;
          top: 100%;
          left: 0;
          right: 0;
          background: var(--surface-elevated, #2d2d2d);
          color: var(--text, #f5f5f5);
          border: 1px solid var(--border, #404040);
          border-top: none;
          border-radius: 0 0 8px 8px;
          list-style: none;
          padding: 0;
          margin: 0;
          max-height: 400px;
          overflow-y: auto;
          z-index: 1000;
          display: none;
        }
        li {
          padding: 10px 16px;
          cursor: pointer;
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        li:hover, li.selected {
          background-color: var(--primary, #007acc);
          color: white;
        }
        .item-source {
          font-size: 12px;
          color: var(--text-muted, #b0b0b0);
          background: var(--surface, #1e1e1e);
          padding: 2px 6px;
          border-radius: var(--border-radius, 6px);
          margin-right: 10px;
        }
        .item-title {
          flex-grow: 1;
        }
        .item-relevance {
          font-size: 12px;          
        }
      </style>
      <div id="search-container">
        <input type="text" id="search-input" placeholder="Search or type a command...">
        <ul id="results-list"></ul>
      </div>
    `;
	}
}

customElements.define("global-search-bar", GlobalSearchBar);

export default GlobalSearchBar;
