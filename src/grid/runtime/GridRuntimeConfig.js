// src/grid/runtime/GridRuntimeConfig.js
// Normalizes and validates a simple runtime config for the grid

/**

 * TODO: Add JSDoc for function normalizeConfig

 * @memberof AutoGenerated

 */

export function normalizeConfig(input = {}) {
  const cfg = typeof input === 'object' && input ? { ...input } : {};
  cfg.columns = Number.isFinite(cfg.columns) && cfg.columns > 0 ? Math.floor(cfg.columns) : 24;
  cfg.gap = Number.isFinite(cfg.gap) && cfg.gap >= 0 ? cfg.gap : 16;
  cfg.blocks = Array.isArray(cfg.blocks) ? cfg.blocks : [];

  const normalizeBlocks = (blocks) => {
    const out = [];
    /**

     * TODO: Add JSDoc for method for

     * @memberof AutoGenerated

     */

    for (const raw of blocks || []) {
      const id = String(raw?.id || raw?.blockId || '').trim();
      if (!id) continue;
      const x = clampInt(raw?.x ?? raw?.position?.x ?? 0, 0);
      const y = clampInt(raw?.y ?? raw?.position?.y ?? 0, 0);
      const w = clampInt(raw?.w ?? raw?.position?.w ?? 1, 1);
      const h = clampInt(raw?.h ?? raw?.position?.h ?? 1, 1);
      const type = String(raw?.type || 'html');
      const props = typeof raw?.props === 'object' && raw?.props ? raw.props : {};
      const constraints = {
        minW: clampInt(raw?.constraints?.minW ?? 1, 1),
        minH: clampInt(raw?.constraints?.minH ?? 1, 1),
        maxW: clampInt(raw?.constraints?.maxW ?? cfg.columns, 1),
        maxH: clampInt(raw?.constraints?.maxH ?? 1000, 1),
      };
      const ww = Math.min(Math.max(w, constraints.minW), constraints.maxW);
      const hh = Math.min(Math.max(h, constraints.minH), constraints.maxH);
      if (x + ww > cfg.columns) continue;
      out.push({ id, x, y, w: ww, h: hh, type, props, constraints });
    }
    return out;
  };

  cfg.blocks = normalizeBlocks(cfg.blocks);

  // Optional responsive templates: { xs/sm/md/lg/xl/xxl: { blocks: [...] } }
  const rawTemplates = typeof input.templates === 'object' && input.templates ? input.templates : null;
  /**

   * TODO: Add JSDoc for method if

   * @memberof AutoGenerated

   */

  if (rawTemplates) {
    const templates = {};
    for (const [name, t] of Object.entries(rawTemplates)) {
      const tpl = typeof t === 'object' && t ? t : {};
      templates[name] = { blocks: normalizeBlocks(tpl.blocks || []) };
    }
    cfg.templates = templates;
  }

  return cfg;
}

/**

 * TODO: Add JSDoc for function clampInt

 * @memberof AutoGenerated

 */

function clampInt(v, min) {
  const n = Number.isFinite(v) ? Math.floor(v) : min;
  return n < min ? min : n;
}
